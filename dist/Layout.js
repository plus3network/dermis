// Generated by CoffeeScript 1.6.3
var Emitter, Layout, Region, View, util,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Emitter = require('emitter');

View = require('./View');

Region = require('./Region');

util = require('./util');

Layout = (function(_super) {
  __extends(Layout, _super);

  function Layout() {
    this.addRegion = __bind(this.addRegion, this);
    this._regions = {};
    if (this.regions == null) {
      this.regions = {};
    }
    if (this.views == null) {
      this.views = {};
    }
    Layout.__super__.constructor.apply(this, arguments);
  }

  Layout.prototype.region = function(name) {
    return this._regions[name];
  };

  Layout.prototype.addRegion = function(name) {
    return this._regions[name] = new Region;
  };

  Layout.prototype.render = function() {
    var name, select, v, _ref, _ref1;
    Layout.__super__.render.apply(this, arguments);
    _ref = this.regions;
    for (name in _ref) {
      select = _ref[name];
      this.addRegion(name);
      this.region(name).$el = this.$(select);
    }
    _ref1 = this.views;
    for (name in _ref1) {
      v = _ref1[name];
      this.region(name).view = v;
    }
    this.emit("render", this);
    return this;
  };

  return Layout;

})(View);

module.exports = Layout;
