// Generated by CoffeeScript 1.6.1
var Emitter, Layout, View, util,
  _this = this,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

Emitter = require('emitter');

View = require('./View');

util = require('./util');

Layout = (function(_super) {

  __extends(Layout, _super);

  function Layout() {
    var _ref, _ref1,
      _this = this;
    this.addRegion = function(name) {
      return Layout.prototype.addRegion.apply(_this, arguments);
    };
    this._regions = {};
    if ((_ref = this.regions) == null) {
      this.regions = {};
    }
    if ((_ref1 = this.views) == null) {
      this.views = {};
    }
    Layout.__super__.constructor.apply(this, arguments);
  }

  Layout.prototype.region = function(name) {
    return this._regions[name];
  };

  Layout.prototype.addRegion = function(name) {
    var _this = this;
    return this._regions[name] = {
      view: null,
      $el: null,
      show: function() {
        var a, reg, vu;
        a = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        reg = _this._regions[name];
        if (reg.view) {
          reg.clear();
          vu = reg.view;
          vu.setElement(vu.el);
          reg.$el.html(vu.render.apply(vu, a).el);
          _this.emit("show:" + name);
          _this.emit("show", name);
        }
        return reg;
      },
      set: function(nu) {
        var reg;
        reg = _this._regions[name];
        reg.view = nu;
        _this.emit("change:" + name, nu);
        _this.emit("change", name, nu);
        return reg;
      },
      clear: function() {
        var reg;
        reg = _this._regions[name];
        if (reg.view) {
          reg.view.remove();
          _this.emit("clear:" + name);
          _this.emit("clear", name);
        }
        return reg;
      }
    };
  };

  Layout.prototype.render = function() {
    var name, select, v, _ref, _ref1;
    Layout.__super__.render.apply(this, arguments);
    _ref = this.regions;
    for (name in _ref) {
      select = _ref[name];
      this.addRegion(name);
      this.region(name).$el = this.$(select);
    }
    _ref1 = this.views;
    for (name in _ref1) {
      v = _ref1[name];
      this.region(name).view = v;
    }
    this.emit("render", this);
    return this;
  };

  return Layout;

})(View);

module.exports = Layout;
