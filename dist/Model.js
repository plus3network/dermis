// Generated by CoffeeScript 1.6.1
var Emitter, Model, rivets, syncAdapter,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

rivets = require('rivets');

syncAdapter = require('./syncAdapter');

Emitter = require('emitter');

Model = (function(_super) {

  __extends(Model, _super);

  Model.prototype.sync = syncAdapter;

  function Model(o) {
    this._props = {};
    this.set(o);
  }

  Model.prototype.get = function(k) {
    return this._props[k];
  };

  Model.prototype.set = function(k, v, silent) {
    var ky, vy;
    if (k == null) {
      return;
    }
    if (typeof k === 'object') {
      silent = v;
      for (ky in k) {
        vy = k[ky];
        this.set(ky, vy, silent);
      }
      return this;
    } else {
      this._props[k] = v;
      if (!silent) {
        this.emit("change", k, v);
        this.emit("change:" + k, v);
      }
      return this;
    }
  };

  Model.prototype.clear = function(silent) {
    var k, v, _ref;
    _ref = this._props;
    for (k in _ref) {
      v = _ref[k];
      this.remove(k, silent);
    }
    return this;
  };

  Model.prototype.has = function(k) {
    return this._props[k] != null;
  };

  Model.prototype.remove = function(k, silent) {
    delete this._props[k];
    if (!silent) {
      this.emit("change", k);
      this.emit("change:" + k);
      this.emit("remove", k);
      this.emit("remove:" + k);
    }
    return this;
  };

  Model.prototype.toJSON = function() {
    return this._props;
  };

  Model.prototype.fetch = function(opt, cb) {
    var _this = this;
    if (typeof opt === 'function' && !cb) {
      cb = opt;
      opt = {};
    }
    this.emit("fetching", opt);
    this.sync('read', this, opt, function(err, res) {
      if (err != null) {
        _this.emit("fetchError", err);
        if (cb) {
          cb(err);
        }
        return;
      }
      if (typeof res.body === 'object') {
        _this.set(res.body);
      }
      _this.emit("fetched", res);
      if (cb) {
        return cb(err, res);
      }
    });
    return this;
  };

  Model.prototype.save = function(opt, cb) {
    var _this = this;
    if (typeof opt === 'function' && !cb) {
      cb = opt;
      opt = {};
    }
    this.emit("saving", opt);
    this.sync('update', this, opt, function(err, res) {
      if (err != null) {
        _this.emit("saveError", err);
        if (cb) {
          cb(err);
        }
        return;
      }
      _this.emit("saved", res);
      if (cb) {
        return cb(err, res);
      }
    });
    return this;
  };

  Model.prototype.create = function(opt, cb) {
    var _this = this;
    if (typeof opt === 'function' && !cb) {
      cb = opt;
      opt = {};
    }
    this.emit("creating", opt);
    this.sync('create', this, opt, function(err, res) {
      if (err != null) {
        _this.emit("createError", err);
        if (cb) {
          cb(err);
        }
        return;
      }
      _this.emit("created", res);
      if (cb) {
        return cb(err, res);
      }
    });
    return this;
  };

  Model.prototype.destroy = function(opt, cb) {
    var _this = this;
    if (typeof opt === 'function' && !cb) {
      cb = opt;
      opt = {};
    }
    this.emit("destroying", opt);
    this.sync('destroy', this, opt, function(err, res) {
      if (err != null) {
        _this.emit("destroyError", err);
        if (cb) {
          cb(err);
        }
        return;
      }
      _this.emit("destroyed", res);
      if (cb) {
        return cb(err, res);
      }
    });
    return this;
  };

  Model.prototype.bind = function(el) {
    return rivets.bind(el, this);
  };

  return Model;

})(Emitter);

module.exports = Model;
