// Generated by CoffeeScript 1.6.1
var Emitter, Router, page,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

Emitter = require('emitter');

page = require('page');

Router = (function(_super) {

  __extends(Router, _super);

  function Router() {
    return Router.__super__.constructor.apply(this, arguments);
  }

  Router.prototype.add = function(route, handler) {
    var fn, h, rt, _i, _len;
    if (typeof route === 'object') {
      for (rt in route) {
        if (!__hasProp.call(route, rt)) continue;
        h = route[rt];
        this.add(rt, h);
      }
      return;
    }
    if (Array.isArray(handler)) {
      for (_i = 0, _len = handler.length; _i < _len; _i++) {
        fn = handler[_i];
        this.add(route, fn);
      }
      return;
    }
    if (typeof handler === 'string') {
      handler = this[handler];
    }
    page(route, handler);
    return this;
  };

  Router.prototype.base = function() {
    page.base.apply(page, arguments);
    return this;
  };

  Router.prototype.show = function() {
    page.show.apply(page, arguments);
    return this;
  };

  Router.prototype.use = function() {
    page.apply(null, ['*'].concat(__slice.call(arguments)));
    return this;
  };

  Router.prototype.start = function() {
    page.start.apply(page, arguments);
    return this;
  };

  Router.prototype.stop = function() {
    page.stop.apply(page, arguments);
    return this;
  };

  Router.prototype.clear = function() {
    page.callbacks = [];
    return this;
  };

  return Router;

})(Emitter);

module.exports = Router;
