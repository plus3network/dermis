// Generated by CoffeeScript 1.6.3
var should,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

should = chai.should();

describe("view", function() {
  it('should be able to make new views', function(done) {
    var TestView, vu, _ref;
    TestView = (function(_super) {
      __extends(TestView, _super);

      function TestView() {
        _ref = TestView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      return TestView;

    })(dermis.View);
    should.exist(TestView);
    vu = new TestView;
    should.exist(vu);
    return done();
  });
  it('should call initialize on construct', function(done) {
    var TestView, vu, _ref;
    TestView = (function(_super) {
      __extends(TestView, _super);

      function TestView() {
        _ref = TestView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      TestView.prototype.initialize = function(a, b, c) {
        should.exist(a);
        should.exist(b);
        should.exist(c);
        a.should.equal(1);
        b.should.equal(2);
        c.should.equal(3);
        done();
        return this;
      };

      return TestView;

    })(dermis.View);
    should.exist(TestView);
    return vu = new TestView(1, 2, 3);
  });
  it('should mixin options', function(done) {
    var TestView, vu, _ref;
    TestView = (function(_super) {
      __extends(TestView, _super);

      function TestView() {
        _ref = TestView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      TestView.prototype.options = {
        a: 1
      };

      TestView.prototype.initialize = function() {
        this.options.should.eql({
          a: 1,
          b: 2,
          c: 3
        });
        done();
        return this;
      };

      return TestView;

    })(dermis.View);
    return vu = new TestView({
      b: 2,
      c: 3
    });
  });
  it('should be able to render with args', function(done) {
    var TestView, el, vu, _ref;
    TestView = (function(_super) {
      __extends(TestView, _super);

      function TestView() {
        _ref = TestView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      TestView.prototype.render = function(_arg) {
        var id;
        id = _arg.id;
        should.exist(id);
        id.should.equal(1);
        should.exist(this.$el);
        this.$el.html("test");
        return this;
      };

      return TestView;

    })(dermis.View);
    vu = new TestView;
    el = vu.render({
      id: 1
    }).el;
    $(el).html().should.equal("test");
    return done();
  });
  it('should be able to render with preset el', function(done) {
    var TestView, el, vu, _ref;
    TestView = (function(_super) {
      __extends(TestView, _super);

      function TestView() {
        _ref = TestView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      TestView.prototype.el = "#sandbox";

      return TestView;

    })(dermis.View);
    vu = new TestView;
    el = $(vu.render().el);
    el.attr('id').should.equal("sandbox");
    return done();
  });
  it('should be able to render with new attrs', function(done) {
    var TestView, el, vu, _ref;
    TestView = (function(_super) {
      __extends(TestView, _super);

      function TestView() {
        _ref = TestView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      TestView.prototype.id = "nada";

      TestView.prototype.content = "test";

      TestView.prototype.tagName = 'li';

      TestView.prototype.className = 'item';

      TestView.prototype.attributes = {
        "height": "250px"
      };

      return TestView;

    })(dermis.View);
    vu = new TestView;
    el = $(vu.render().el);
    el.html().should.equal("test");
    el.attr("id").should.equal("nada");
    el.attr("class").should.equal("item");
    el.attr("height").should.equal("250px");
    el.prop("tagName").should.equal("LI");
    return done();
  });
  it('should be able to render with new attrs as functions', function(done) {
    var TestView, el, vu, _ref;
    TestView = (function(_super) {
      __extends(TestView, _super);

      function TestView() {
        _ref = TestView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      TestView.prototype.id = function() {
        return "nada";
      };

      TestView.prototype.content = function() {
        return "test";
      };

      TestView.prototype.tagName = function() {
        return 'li';
      };

      TestView.prototype.className = function() {
        return 'item';
      };

      TestView.prototype.attributes = function() {
        return {
          "height": "250px"
        };
      };

      return TestView;

    })(dermis.View);
    vu = new TestView;
    el = $(vu.render().el);
    el.html().should.equal("test");
    el.attr("id").should.equal("nada");
    el.attr("class").should.equal("item");
    el.attr("height").should.equal("250px");
    el.prop("tagName").should.equal("LI");
    return done();
  });
  return it('should have $.find sugar', function(done) {
    var TestView, el, vu, _ref;
    TestView = (function(_super) {
      __extends(TestView, _super);

      function TestView() {
        _ref = TestView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      TestView.prototype.render = function() {
        should.exist(this.$el);
        this.$el.html('<p id="jarude">test</p>');
        should.exist(this.$);
        this.$("#jarude").html().should.equal("test");
        return this;
      };

      return TestView;

    })(dermis.View);
    vu = new TestView;
    el = vu.render().el;
    should.exist(el);
    $(el).html().should.equal('<p id="jarude">test</p>');
    return done();
  });
});

describe("view events", function() {
  it('should be able to bind events with args as string', function(done) {
    var TestView, el, vu, _ref;
    TestView = (function(_super) {
      __extends(TestView, _super);

      function TestView() {
        _ref = TestView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      TestView.prototype.events = {
        "click .btn": "onClick",
        "dblclick .btn": "wrongEvent"
      };

      TestView.prototype.wrongEvent = function() {
        throw new Error("Wrong event thrown");
      };

      TestView.prototype.onClick = function(e) {
        should.exist(e);
        return done();
      };

      TestView.prototype.render = function() {
        this.$el.html("<button class='btn'>Click Me</button>");
        return this;
      };

      return TestView;

    })(dermis.View);
    vu = new TestView;
    el = $(vu.render().el);
    return el.find(".btn").click();
  });
  it('should be able to bind events with args as function', function(done) {
    var TestView, el, vu, _ref;
    TestView = (function(_super) {
      __extends(TestView, _super);

      function TestView() {
        _ref = TestView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      TestView.prototype.events = {
        "click .btn": function(e) {
          should.exist(e);
          return done();
        },
        "dblclick .btn": function() {
          throw new Error("Wrong event thrown");
        }
      };

      TestView.prototype.render = function() {
        this.$el.html("<button class='btn'>Click Me</button>");
        return this;
      };

      return TestView;

    })(dermis.View);
    vu = new TestView;
    el = $(vu.render().el);
    return el.find(".btn").click();
  });
  it('should be able to bind events with args as object and string', function(done) {
    var TestView, el, vu, _ref;
    TestView = (function(_super) {
      __extends(TestView, _super);

      function TestView() {
        _ref = TestView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      TestView.prototype.events = {
        ".btn": {
          "click": "onClick",
          "dblclick": "wrongEvent"
        }
      };

      TestView.prototype.wrongEvent = function() {
        throw new Error("Wrong event thrown");
      };

      TestView.prototype.onClick = function(e) {
        should.exist(e);
        return done();
      };

      TestView.prototype.render = function() {
        this.$el.html("<button class='btn'>Click Me</button>");
        return this;
      };

      return TestView;

    })(dermis.View);
    vu = new TestView;
    el = $(vu.render().el);
    return el.find(".btn").click();
  });
  it('should be able to bind events with args as object and function', function(done) {
    var TestView, el, vu, _ref;
    TestView = (function(_super) {
      __extends(TestView, _super);

      function TestView() {
        _ref = TestView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      TestView.prototype.events = {
        ".btn": {
          "dblclick": function() {
            throw new Error("Wrong event thrown");
          },
          "click": function(e) {
            should.exist(e);
            return done();
          }
        }
      };

      TestView.prototype.render = function() {
        this.$el.html("<button class='btn'>Click Me</button>");
        return this;
      };

      return TestView;

    })(dermis.View);
    vu = new TestView;
    el = $(vu.render().el);
    return el.find(".btn").click();
  });
  it('should be able to unbind events', function(done) {
    var TestView, btn, vu, _ref;
    TestView = (function(_super) {
      __extends(TestView, _super);

      function TestView() {
        _ref = TestView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      TestView.prototype.events = {
        "click .btn": "onClick"
      };

      TestView.prototype.onClick = function(e) {
        throw new Error("click event happened!");
      };

      TestView.prototype.render = function() {
        this.$el.html("<button class='btn'>Click Me</button>");
        return this;
      };

      return TestView;

    })(dermis.View);
    vu = new TestView;
    btn = vu.render().$('.btn');
    vu.undelegateEvents();
    btn.click();
    btn.click();
    btn.click();
    return done();
  });
  it('should be able to rebind events without double-calling', function(done) {
    var TestView, btn, vu, _ref;
    TestView = (function(_super) {
      __extends(TestView, _super);

      function TestView() {
        _ref = TestView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      TestView.prototype.events = {
        "click .btn": "onClick"
      };

      TestView.prototype.onClick = function(e) {
        should.exist(e);
        return done();
      };

      TestView.prototype.render = function() {
        this.$el.html("<button class='btn'>Click Me</button>");
        return this;
      };

      return TestView;

    })(dermis.View);
    vu = new TestView;
    btn = vu.render().$('.btn');
    vu.delegateEvents();
    return btn.click();
  });
  it('should be able to unbind and bind events', function(done) {
    var TestView, btn, vu, _ref;
    TestView = (function(_super) {
      __extends(TestView, _super);

      function TestView() {
        _ref = TestView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      TestView.prototype.events = {
        "click .btn": "onClick"
      };

      TestView.prototype.onClick = function(e) {
        should.exist(e);
        return done();
      };

      TestView.prototype.render = function() {
        this.$el.html("<button class='btn'>Click Me</button>");
        return this;
      };

      return TestView;

    })(dermis.View);
    vu = new TestView;
    btn = vu.render().$('.btn');
    vu.undelegateEvents();
    vu.delegateEvents();
    return btn.click();
  });
  return it('should be able to remove', function(done) {
    var TestView, btn, vu, _ref;
    TestView = (function(_super) {
      __extends(TestView, _super);

      function TestView() {
        _ref = TestView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      TestView.prototype.events = {
        "click .btn": "onClick"
      };

      TestView.prototype.onClick = function(e) {
        throw new Error("click event happened!");
      };

      TestView.prototype.render = function() {
        this.$el.html("<button class='btn'>Click Me</button>");
        return this;
      };

      return TestView;

    })(dermis.View);
    vu = new TestView;
    btn = vu.render().$('.btn');
    vu.remove();
    btn.click();
    btn.click();
    btn.click();
    return done();
  });
});
