// Generated by CoffeeScript 1.6.2
var should,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

should = chai.should();

describe("model", function() {
  it("should be able to specify defaults", function(done) {
    var Pet, TestModel, mod, _ref, _ref1;

    Pet = (function(_super) {
      __extends(Pet, _super);

      function Pet() {
        _ref = Pet.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      return Pet;

    })(dermis.Model);
    TestModel = (function(_super) {
      __extends(TestModel, _super);

      function TestModel() {
        _ref1 = TestModel.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      TestModel.prototype.defaults = {
        dog: {
          name: "Fido"
        },
        name: "Test"
      };

      return TestModel;

    })(dermis.Model);
    mod = new TestModel;
    mod.get('dog').name.should.equal("Fido");
    mod.get('name').should.equal("Test");
    return done();
  });
  it("should be able to specify defaults then override via constructor", function(done) {
    var Pet, TestModel, mod, _ref, _ref1;

    Pet = (function(_super) {
      __extends(Pet, _super);

      function Pet() {
        _ref = Pet.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      return Pet;

    })(dermis.Model);
    TestModel = (function(_super) {
      __extends(TestModel, _super);

      function TestModel() {
        _ref1 = TestModel.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      TestModel.prototype.defaults = {
        dog: {
          name: "Fido"
        },
        name: "Test"
      };

      return TestModel;

    })(dermis.Model);
    mod = new TestModel({
      name: "Tom"
    });
    mod.get('dog').name.should.equal("Fido");
    mod.get('name').should.equal("Tom");
    return done();
  });
  it("should be able to set", function(done) {
    var TestModel, mod, _ref;

    TestModel = (function(_super) {
      __extends(TestModel, _super);

      function TestModel() {
        _ref = TestModel.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      return TestModel;

    })(dermis.Model);
    mod = new TestModel;
    mod.on("change:wut", function(v) {
      v.should.equal(2);
      return done();
    });
    return mod.set("wut", 2);
  });
  it("should be able to set silently", function(done) {
    var TestModel, mod, _ref;

    TestModel = (function(_super) {
      __extends(TestModel, _super);

      function TestModel() {
        _ref = TestModel.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      return TestModel;

    })(dermis.Model);
    mod = new TestModel;
    mod.on("change:wut", function(v) {
      throw new Error("Change event called");
    });
    mod.set("wut", 2, true);
    return done();
  });
  it("should be able to set via constructor", function(done) {
    var TestModel, mod, _ref;

    TestModel = (function(_super) {
      __extends(TestModel, _super);

      function TestModel() {
        _ref = TestModel.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      return TestModel;

    })(dermis.Model);
    mod = new TestModel({
      wut: 2
    });
    mod.get("wut").should.equal(2);
    return done();
  });
  it("should be able to set by object", function(done) {
    var TestModel, mod, _ref;

    TestModel = (function(_super) {
      __extends(TestModel, _super);

      function TestModel() {
        _ref = TestModel.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      return TestModel;

    })(dermis.Model);
    mod = new TestModel;
    mod.on("change:wut", function(v) {
      v.should.equal(2);
      return done();
    });
    return mod.set({
      wut: 2
    });
  });
  it("should be able to set by object silently", function(done) {
    var TestModel, mod, _ref;

    TestModel = (function(_super) {
      __extends(TestModel, _super);

      function TestModel() {
        _ref = TestModel.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      return TestModel;

    })(dermis.Model);
    mod = new TestModel;
    mod.on("change:wut", function(v) {
      throw new Error("Change event called");
    });
    mod.set({
      wut: 2
    }, true);
    return done();
  });
  it("should be able to set with casting", function(done) {
    var Pet, TestModel, mod, _ref, _ref1;

    Pet = (function(_super) {
      __extends(Pet, _super);

      function Pet() {
        _ref = Pet.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      return Pet;

    })(dermis.Model);
    TestModel = (function(_super) {
      __extends(TestModel, _super);

      function TestModel() {
        _ref1 = TestModel.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      TestModel.prototype.casts = {
        dog: Pet
      };

      return TestModel;

    })(dermis.Model);
    mod = new TestModel;
    mod.on("change:dog", function(v) {
      (v instanceof Pet).should.equal(true);
      v.get('name').should.equal("Fido");
      return done();
    });
    return mod.set("dog", {
      name: "Fido"
    });
  });
  it("should be able to set with defaults and casting", function(done) {
    var Pet, TestModel, mod, _ref, _ref1;

    Pet = (function(_super) {
      __extends(Pet, _super);

      function Pet() {
        _ref = Pet.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      return Pet;

    })(dermis.Model);
    TestModel = (function(_super) {
      __extends(TestModel, _super);

      function TestModel() {
        _ref1 = TestModel.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      TestModel.prototype.casts = {
        dog: Pet
      };

      TestModel.prototype.defaults = {
        dog: {
          name: "Fido"
        }
      };

      return TestModel;

    })(dermis.Model);
    mod = new TestModel;
    should.exist(mod.get('dog'));
    (mod.get('dog') instanceof Pet).should.equal(true);
    mod.get('dog').get('name').should.equal("Fido");
    return done();
  });
  it("should be able to list props via toJSON", function(done) {
    var TestModel, mod, _ref;

    TestModel = (function(_super) {
      __extends(TestModel, _super);

      function TestModel() {
        _ref = TestModel.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      return TestModel;

    })(dermis.Model);
    mod = new TestModel({
      wut: 2
    });
    mod.toJSON().should.eql({
      wut: 2
    });
    return done();
  });
  it("should be able to set then has", function(done) {
    var TestModel, mod, _ref;

    TestModel = (function(_super) {
      __extends(TestModel, _super);

      function TestModel() {
        _ref = TestModel.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      return TestModel;

    })(dermis.Model);
    mod = new TestModel({
      wut: 2
    });
    mod.has("wut").should.equal(true);
    return done();
  });
  return it("should be able to clear props via clear", function(done) {
    var TestModel, mod, _ref;

    TestModel = (function(_super) {
      __extends(TestModel, _super);

      function TestModel() {
        _ref = TestModel.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      return TestModel;

    })(dermis.Model);
    mod = new TestModel({
      wut: 2
    });
    mod.toJSON().should.eql({
      wut: 2
    });
    mod.clear();
    mod.toJSON().should.eql({});
    return done();
  });
});
