// Generated by CoffeeScript 1.6.2
var should,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

should = chai.should();

describe("layout", function() {
  it('should be able to make new layouts', function(done) {
    var TestLayout, lay, _ref;

    TestLayout = (function(_super) {
      __extends(TestLayout, _super);

      function TestLayout() {
        _ref = TestLayout.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      return TestLayout;

    })(dermis.Layout);
    should.exist(TestLayout);
    lay = new TestLayout;
    should.exist(lay);
    return done();
  });
  it('should call initialize on construct', function(done) {
    var TestLayout, lay, _ref;

    TestLayout = (function(_super) {
      __extends(TestLayout, _super);

      function TestLayout() {
        _ref = TestLayout.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      TestLayout.prototype.initialize = function(a, b, c) {
        should.exist(a);
        should.exist(b);
        should.exist(c);
        a.should.equal(1);
        b.should.equal(2);
        c.should.equal(3);
        done();
        return this;
      };

      return TestLayout;

    })(dermis.Layout);
    should.exist(TestLayout);
    return lay = new TestLayout(1, 2, 3);
  });
  it('should be able to render with args', function(done) {
    var TestLayout, el, lay, _ref;

    TestLayout = (function(_super) {
      __extends(TestLayout, _super);

      function TestLayout() {
        _ref = TestLayout.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      TestLayout.prototype.render = function(_arg) {
        var id;

        id = _arg.id;
        should.exist(id);
        id.should.equal(1);
        should.exist(this.$el);
        this.$el.html("test");
        return this;
      };

      return TestLayout;

    })(dermis.Layout);
    lay = new TestLayout;
    el = lay.render({
      id: 1
    }).el;
    $(el).html().should.equal("test");
    return done();
  });
  it('should be able to render with new attrs', function(done) {
    var TestLayout, el, lay, _ref;

    TestLayout = (function(_super) {
      __extends(TestLayout, _super);

      function TestLayout() {
        _ref = TestLayout.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      TestLayout.prototype.id = "nada";

      TestLayout.prototype.content = "test";

      TestLayout.prototype.tagName = 'li';

      TestLayout.prototype.className = 'item';

      TestLayout.prototype.attributes = {
        "height": "250px"
      };

      return TestLayout;

    })(dermis.Layout);
    lay = new TestLayout;
    el = $(lay.render().el);
    el.html().should.equal("test");
    el.attr("id").should.equal("nada");
    el.attr("class").should.equal("item");
    el.attr("height").should.equal("250px");
    el.prop("tagName").should.equal("LI");
    return done();
  });
  it('should be able to render with new attrs as functions', function(done) {
    var TestLayout, el, lay, _ref;

    TestLayout = (function(_super) {
      __extends(TestLayout, _super);

      function TestLayout() {
        _ref = TestLayout.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      TestLayout.prototype.id = function() {
        return "nada";
      };

      TestLayout.prototype.content = function() {
        return "test";
      };

      TestLayout.prototype.tagName = function() {
        return 'li';
      };

      TestLayout.prototype.className = function() {
        return 'item';
      };

      TestLayout.prototype.attributes = function() {
        return {
          "height": "250px"
        };
      };

      return TestLayout;

    })(dermis.Layout);
    lay = new TestLayout;
    el = $(lay.render().el);
    el.html().should.equal("test");
    el.attr("id").should.equal("nada");
    el.attr("class").should.equal("item");
    el.attr("height").should.equal("250px");
    el.prop("tagName").should.equal("LI");
    return done();
  });
  return it('should have $.find sugar', function(done) {
    var TestLayout, el, lay, _ref;

    TestLayout = (function(_super) {
      __extends(TestLayout, _super);

      function TestLayout() {
        _ref = TestLayout.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      TestLayout.prototype.render = function() {
        should.exist(this.$el);
        this.$el.html('<p id="jarude">test</p>');
        should.exist(this.$);
        this.$("#jarude").html().should.equal("test");
        return this;
      };

      return TestLayout;

    })(dermis.Layout);
    lay = new TestLayout;
    el = lay.render().el;
    should.exist(el);
    $(el).html().should.equal('<p id="jarude">test</p>');
    return done();
  });
});

describe("layout children", function() {
  it("should be able to define regions", function(done) {
    var TestLayout, el, lay, _ref;

    TestLayout = (function(_super) {
      __extends(TestLayout, _super);

      function TestLayout() {
        _ref = TestLayout.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      TestLayout.prototype.content = "<div class='sidebar'/><div class='content'/>";

      TestLayout.prototype.className = 'main-content';

      TestLayout.prototype.regions = {
        sidebar: ".sidebar",
        content: ".content"
      };

      return TestLayout;

    })(dermis.Layout);
    lay = new TestLayout;
    el = $(lay.render().el);
    return done();
  });
  it("should be able to get regions elements", function(done) {
    var TestLayout, el, lay, _ref;

    TestLayout = (function(_super) {
      __extends(TestLayout, _super);

      function TestLayout() {
        _ref = TestLayout.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      TestLayout.prototype.content = "<div class='sidebar'/><div class='content'/>";

      TestLayout.prototype.className = 'main-content';

      TestLayout.prototype.regions = {
        sidebar: ".sidebar",
        content: ".content"
      };

      return TestLayout;

    })(dermis.Layout);
    lay = new TestLayout;
    el = $(lay.render().el);
    should.exist(lay.region("sidebar").$el);
    should.exist(lay.region("content").$el);
    should.not.exist(lay.region("dummy"));
    return done();
  });
  it("should be able to set regions", function(done) {
    var TestLayout, TestView, el, lay, _ref, _ref1;

    TestLayout = (function(_super) {
      __extends(TestLayout, _super);

      function TestLayout() {
        _ref = TestLayout.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      TestLayout.prototype.content = "<div class='sidebar'/><div class='content'/>";

      TestLayout.prototype.className = 'main-content';

      TestLayout.prototype.regions = {
        sidebar: ".sidebar",
        content: ".content"
      };

      return TestLayout;

    })(dermis.Layout);
    TestView = (function(_super) {
      __extends(TestView, _super);

      function TestView() {
        _ref1 = TestView.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      TestView.prototype.content = "Hello";

      return TestView;

    })(dermis.View);
    lay = new TestLayout;
    el = $(lay.render().el);
    lay.region("sidebar").set(new TestView);
    lay.region("content").set(new TestView);
    should.exist(lay.region("sidebar").view);
    should.exist(lay.region("content").view);
    return done();
  });
  it("should be able to set and show regions", function(done) {
    var TestLayout, TestView, el, lay, _ref, _ref1;

    TestView = (function(_super) {
      __extends(TestView, _super);

      function TestView() {
        _ref = TestView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      TestView.prototype.content = "Hello";

      return TestView;

    })(dermis.View);
    TestLayout = (function(_super) {
      __extends(TestLayout, _super);

      function TestLayout() {
        _ref1 = TestLayout.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      TestLayout.prototype.content = "<div class='sidebar'/><div class='content'/>";

      TestLayout.prototype.className = 'main-content';

      TestLayout.prototype.regions = {
        sidebar: ".sidebar",
        content: ".content"
      };

      return TestLayout;

    })(dermis.Layout);
    lay = new TestLayout;
    el = $(lay.render().el);
    lay.region("sidebar").set(new TestView);
    lay.region("content").set(new TestView);
    should.exist(lay.region("sidebar").view);
    should.exist(lay.region("content").view);
    lay.region("sidebar").show();
    lay.region("content").show();
    lay.region("sidebar").$el.html().should.equal("<div>Hello</div>");
    lay.region("content").$el.html().should.equal("<div>Hello</div>");
    return done();
  });
  it("should be able to set and show over regions", function(done) {
    var OtherTestView, TestLayout, TestView, el, lay, _ref, _ref1, _ref2;

    TestView = (function(_super) {
      __extends(TestView, _super);

      function TestView() {
        _ref = TestView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      TestView.prototype.content = "<button id='btn'>Hello</btn>";

      TestView.prototype.events = {
        "click .btn": function() {
          throw "Click fired!";
        }
      };

      return TestView;

    })(dermis.View);
    OtherTestView = (function(_super) {
      __extends(OtherTestView, _super);

      function OtherTestView() {
        _ref1 = OtherTestView.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      OtherTestView.prototype.content = "<button id='btn'>Hello 2</btn>";

      return OtherTestView;

    })(dermis.View);
    TestLayout = (function(_super) {
      __extends(TestLayout, _super);

      function TestLayout() {
        _ref2 = TestLayout.__super__.constructor.apply(this, arguments);
        return _ref2;
      }

      TestLayout.prototype.content = "<div class='sidebar'/><div class='content'/>";

      TestLayout.prototype.className = 'main-content';

      TestLayout.prototype.regions = {
        sidebar: ".sidebar",
        content: ".content"
      };

      return TestLayout;

    })(dermis.Layout);
    lay = new TestLayout;
    el = $(lay.render().el);
    lay.region("sidebar").set(new TestView);
    lay.region("content").set(new TestView);
    should.exist(lay.region("sidebar").view);
    should.exist(lay.region("content").view);
    lay.region("sidebar").show();
    lay.region("content").show();
    lay.region("sidebar").$el.html().should.equal('<div><button id="btn">Hello</button></div>');
    lay.region("content").$el.html().should.equal('<div><button id="btn">Hello</button></div>');
    lay.region("sidebar").set(new OtherTestView);
    lay.region("content").set(new OtherTestView);
    should.exist(lay.region("sidebar").view);
    should.exist(lay.region("content").view);
    lay.region("sidebar").show();
    lay.region("content").show();
    lay.region("sidebar").$el.html().should.equal('<div><button id="btn">Hello 2</button></div>');
    lay.region("content").$el.html().should.equal('<div><button id="btn">Hello 2</button></div>');
    lay.region("sidebar").view.$(".btn").click();
    lay.region("content").view.$(".btn").click();
    return done();
  });
  it("should be able to preset and show regions", function(done) {
    var TestLayout, TestView, el, lay, _ref, _ref1;

    TestView = (function(_super) {
      __extends(TestView, _super);

      function TestView() {
        _ref = TestView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      TestView.prototype.content = "Hello";

      return TestView;

    })(dermis.View);
    TestLayout = (function(_super) {
      __extends(TestLayout, _super);

      function TestLayout() {
        _ref1 = TestLayout.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      TestLayout.prototype.content = "<div class='sidebar'/><div class='content'/>";

      TestLayout.prototype.className = 'main-content';

      TestLayout.prototype.regions = {
        sidebar: ".sidebar",
        content: ".content"
      };

      TestLayout.prototype.views = {
        sidebar: new TestView,
        content: new TestView
      };

      return TestLayout;

    })(dermis.Layout);
    lay = new TestLayout;
    el = $(lay.render().el);
    should.exist(lay.region("sidebar").view);
    should.exist(lay.region("content").view);
    lay.region("sidebar").show();
    lay.region("content").show();
    lay.region("sidebar").$el.html().should.equal("<div>Hello</div>");
    lay.region("content").$el.html().should.equal("<div>Hello</div>");
    return done();
  });
  return it("should be able to set and show regions with arguments", function(done) {
    var TestLayout, TestView, el, lay, _ref, _ref1;

    TestLayout = (function(_super) {
      __extends(TestLayout, _super);

      function TestLayout() {
        _ref = TestLayout.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      TestLayout.prototype.content = "<div class='sidebar'/><div class='content'/>";

      TestLayout.prototype.className = 'main-content';

      TestLayout.prototype.regions = {
        sidebar: ".sidebar",
        content: ".content"
      };

      return TestLayout;

    })(dermis.Layout);
    TestView = (function(_super) {
      __extends(TestView, _super);

      function TestView() {
        _ref1 = TestView.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      TestView.prototype.render = function(_arg) {
        var id;

        id = _arg.id;
        this.$el.html(id);
        return this;
      };

      return TestView;

    })(dermis.View);
    lay = new TestLayout;
    el = $(lay.render().el);
    lay.region("sidebar").set(new TestView);
    lay.region("content").set(new TestView);
    should.exist(lay.region("sidebar").view);
    should.exist(lay.region("content").view);
    lay.region("sidebar").show({
      id: 1
    });
    lay.region("content").show({
      id: 2
    });
    lay.region("sidebar").$el.html().should.equal("<div>1</div>");
    lay.region("content").$el.html().should.equal("<div>2</div>");
    return done();
  });
});
