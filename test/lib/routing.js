// Generated by CoffeeScript 1.6.2
var should;

should = chai.should();

describe("routing", function() {
  if (!window._phantom) {
    return;
  }
  it("should trigger routes with qs", function(done) {
    dermis.router.add("/test", function(ctx) {
      should.exist(ctx);
      should.exist(ctx.querystring);
      ctx.querystring.should.equal("test=1");
      return done();
    });
    return dermis.router.show("/test?test=1");
  });
  it("should trigger routes with params", function(done) {
    dermis.router.add("/user/:id/:action", function(ctx) {
      should.exist(ctx);
      should.exist(ctx.params);
      ctx.params.id.should.equal("eric");
      ctx.params.action.should.equal("edit");
      return done();
    });
    return dermis.router.show("/user/eric/edit");
  });
  it("should not trigger routes when stopped", function(done) {
    dermis.router.add("/user/:id/:action", function(ctx) {
      throw new Error("route called");
    });
    dermis.router.stop();
    window.location.href = "#/user/eric/edit";
    return done();
  });
  it("should not trigger routes when it doesnt match", function(done) {
    dermis.router.add("/user/:id/:action", function(ctx) {
      throw new Error("route called");
    });
    dermis.router.show("/user/eric");
    return done();
  });
  it("should trigger routes when restarted", function(done) {
    dermis.router.add("/user/:id/:action", function(ctx) {
      should.exist(ctx);
      should.exist(ctx.params);
      ctx.params.id.should.equal("eric");
      ctx.params.action.should.equal("edit");
      return done();
    });
    dermis.router.stop();
    dermis.router.start();
    return window.location.href = "#/user/eric/edit";
  });
  it("should accept objects of routes", function(done) {
    dermis.router.add({
      "/user/:id/:action": function(ctx) {
        should.exist(ctx);
        should.exist(ctx.params);
        ctx.params.id.should.equal("eric");
        ctx.params.action.should.equal("edit");
        return done();
      }
    });
    return dermis.router.show("/user/eric/edit");
  });
  it("should accept local routes", function(done) {
    dermis.router.handleRoute = function(ctx) {
      should.exist(ctx);
      should.exist(ctx.params);
      ctx.params.id.should.equal("eric");
      ctx.params.action.should.equal("edit");
      return done();
    };
    dermis.router.add({
      "/user/:id/:action": "handleRoute"
    });
    return dermis.router.show("/user/eric/edit");
  });
  it("should accept array of routes", function(done) {
    var fns;

    fns = [];
    fns.push(function(ctx, next) {
      should.exist(ctx);
      should.exist(ctx.params);
      ctx.params.id.should.equal("eric");
      ctx.params.action.should.equal("edit");
      return next();
    });
    fns.push(function(ctx, next) {
      should.exist(ctx);
      should.exist(ctx.params);
      ctx.params.id.should.equal("eric");
      ctx.params.action.should.equal("edit");
      return done();
    });
    dermis.router.add("/user/:id/:action", fns);
    return dermis.router.show("/user/eric/edit");
  });
  it("should trigger routes with params and pre-middleware", function(done) {
    dermis.router.use(function(ctx, next) {
      ctx.params.id = "contra";
      return next();
    });
    dermis.router.add("/user/:id/:action", function(ctx) {
      should.exist(ctx);
      should.exist(ctx.params);
      ctx.params.id.should.equal("contra");
      ctx.params.action.should.equal("edit");
      return done();
    });
    return dermis.router.show("/user/eric/edit");
  });
  it("should trigger routes with params and post-middleware", function(done) {
    dermis.router.add("/user/:id/:action", function(ctx, next) {
      should.exist(ctx);
      should.exist(ctx.params);
      ctx.params.id.should.equal("eric");
      ctx.params.action.should.equal("edit");
      ctx.params.id = "contra";
      return next();
    });
    dermis.router.use(function(ctx, next) {
      ctx.params.id.should.equal("contra");
      return done();
    });
    return dermis.router.show("/user/eric/edit");
  });
  return it("should trigger routes with changed base path", function(done) {
    dermis.router.add("/user/:id/:action", function(ctx) {
      should.exist(ctx);
      should.exist(ctx.params);
      ctx.params.id.should.equal("eric");
      ctx.params.action.should.equal("edit");
      return done();
    });
    dermis.router.base('/wat');
    return dermis.router.show("/wat/user/eric/edit");
  });
});
